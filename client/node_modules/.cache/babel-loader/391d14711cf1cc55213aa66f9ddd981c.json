{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Helpers } from 'victory-core';\nimport { VictoryTooltip } from 'victory-tooltip';\nimport { ChartCursorTooltip } from '../ChartCursorTooltip';\nimport { ChartLegendTooltipContent } from './ChartLegendTooltipContent';\nimport { ChartLegendTooltipStyles } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getLegendTooltipDataProps, getLegendTooltipSize, getLegendTooltipVisibleData, getLegendTooltipVisibleText, getTheme } from '../ChartUtils';\nexport var ChartLegendTooltip = function ChartLegendTooltip(_a) {\n  var activePoints = _a.activePoints,\n      datum = _a.datum,\n      _a$center = _a.center,\n      center = _a$center === void 0 ? {\n    x: 0,\n    y: 0\n  } : _a$center,\n      flyoutHeight = _a.flyoutHeight,\n      flyoutWidth = _a.flyoutWidth,\n      height = _a.height,\n      _a$isCursorTooltip = _a.isCursorTooltip,\n      isCursorTooltip = _a$isCursorTooltip === void 0 ? true : _a$isCursorTooltip,\n      _a$labelComponent = _a.labelComponent,\n      labelComponent = _a$labelComponent === void 0 ? React.createElement(ChartLegendTooltipContent, null) : _a$labelComponent,\n      legendData = _a.legendData,\n      text = _a.text,\n      themeColor = _a.themeColor,\n      themeVariant = _a.themeVariant,\n      title = _a.title,\n      width = _a.width,\n      _a$theme = _a.theme,\n      theme = _a$theme === void 0 ? getTheme(themeColor, themeVariant) : _a$theme,\n      rest = __rest(_a, [\"activePoints\", \"datum\", \"center\", \"flyoutHeight\", \"flyoutWidth\", \"height\", \"isCursorTooltip\", \"labelComponent\", \"legendData\", \"text\", \"themeColor\", \"themeVariant\", \"title\", \"width\", \"theme\"]);\n\n  var pointerLength = theme && theme.tooltip ? Helpers.evaluateProp(theme.tooltip.pointerLength) : 10;\n\n  var legendTooltipProps = function legendTooltipProps() {\n    return {\n      legendData: getLegendTooltipVisibleData({\n        activePoints: activePoints,\n        legendData: legendData,\n        text: text,\n        theme: theme\n      }),\n      legendProps: getLegendTooltipDataProps(labelComponent.props.legendComponent),\n      text: getLegendTooltipVisibleText({\n        activePoints: activePoints,\n        legendData: legendData,\n        text: text\n      }),\n      theme: theme\n    };\n  }; // Returns flyout height based on legend size\n\n\n  var getFlyoutHeight = function getFlyoutHeight(_ref) {\n    var height = _ref.height;\n\n    var _flyoutHeight = height + ChartLegendTooltipStyles.flyout.padding;\n\n    return title ? _flyoutHeight : _flyoutHeight - 10;\n  }; // Returns flyout width based on legend size\n\n\n  var getFlyoutWidth = function getFlyoutWidth(_ref2) {\n    var width = _ref2.width;\n    return width + ChartLegendTooltipStyles.flyout.padding;\n  }; // Returns the tooltip content component\n\n\n  var getTooltipContentComponent = function getTooltipContentComponent(props) {\n    return React.cloneElement(labelComponent, Object.assign({\n      center: center,\n      flyoutHeight: flyoutHeight || getFlyoutHeight(props),\n      flyoutWidth: flyoutWidth || getFlyoutWidth(props),\n      height: height,\n      legendData: legendData,\n      title: title,\n      width: width\n    }, labelComponent.props));\n  }; // Returns the tooltip component\n\n\n  var getTooltipComponent = function getTooltipComponent() {\n    // There must be at least one active, visible item or else this will return zero for height & width.\n    var legendSize = getLegendTooltipSize(legendTooltipProps());\n\n    if (legendSize.height === 0 && legendSize.width === 0) {\n      return null;\n    }\n\n    var _flyoutWidth = getFlyoutWidth(legendSize);\n\n    var tooltipComponent = isCursorTooltip ? React.createElement(ChartCursorTooltip, null) : React.createElement(ChartTooltip, null);\n    return React.cloneElement(tooltipComponent, Object.assign(Object.assign(Object.assign({\n      activePoints: activePoints,\n      center: center,\n      datum: datum,\n      flyoutHeight: flyoutHeight || getFlyoutHeight(legendSize),\n      flyoutWidth: flyoutWidth || getFlyoutWidth(legendSize),\n      height: height,\n      labelComponent: getTooltipContentComponent(legendSize)\n    }, flyoutWidth === undefined && {\n      showPointer: width > _flyoutWidth + center.x + pointerLength || center.x > _flyoutWidth + pointerLength\n    }), {\n      text: text,\n      theme: theme,\n      width: width\n    }), rest));\n  };\n\n  return getTooltipComponent();\n};\nChartLegendTooltip.displayName = 'ChartLegendTooltip'; // Note: VictoryTooltip.defaultEvents must be hoisted\n\nhoistNonReactStatics(ChartLegendTooltip, VictoryTooltip);","map":{"version":3,"sources":["../../../../src/components/ChartLegendTooltip/ChartLegendTooltip.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Helpers } from 'victory-core';\nimport { VictoryTooltip } from 'victory-tooltip';\nimport { ChartCursorTooltip } from '../ChartCursorTooltip';\nimport { ChartLegendTooltipContent } from './ChartLegendTooltipContent';\nimport { ChartLegendTooltipStyles } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getLegendTooltipDataProps, getLegendTooltipSize, getLegendTooltipVisibleData, getLegendTooltipVisibleText, getTheme } from '../ChartUtils';\nexport const ChartLegendTooltip = (_a) => {\n    var { activePoints, datum, center = { x: 0, y: 0 }, flyoutHeight, flyoutWidth, height, isCursorTooltip = true, labelComponent = React.createElement(ChartLegendTooltipContent, null), legendData, text, themeColor, themeVariant, title, width, \n    // destructure last\n    theme = getTheme(themeColor, themeVariant) } = _a, rest = __rest(_a, [\"activePoints\", \"datum\", \"center\", \"flyoutHeight\", \"flyoutWidth\", \"height\", \"isCursorTooltip\", \"labelComponent\", \"legendData\", \"text\", \"themeColor\", \"themeVariant\", \"title\", \"width\", \"theme\"]);\n    const pointerLength = theme && theme.tooltip ? Helpers.evaluateProp(theme.tooltip.pointerLength) : 10;\n    const legendTooltipProps = () => ({\n        legendData: getLegendTooltipVisibleData({ activePoints, legendData, text, theme }),\n        legendProps: getLegendTooltipDataProps(labelComponent.props.legendComponent),\n        text: getLegendTooltipVisibleText({ activePoints, legendData, text }),\n        theme\n    });\n    // Returns flyout height based on legend size\n    const getFlyoutHeight = ({ height }) => {\n        const _flyoutHeight = height + ChartLegendTooltipStyles.flyout.padding;\n        return title ? _flyoutHeight : _flyoutHeight - 10;\n    };\n    // Returns flyout width based on legend size\n    const getFlyoutWidth = ({ width }) => width + ChartLegendTooltipStyles.flyout.padding;\n    // Returns the tooltip content component\n    const getTooltipContentComponent = (props) => React.cloneElement(labelComponent, Object.assign({ center, flyoutHeight: flyoutHeight || getFlyoutHeight(props), flyoutWidth: flyoutWidth || getFlyoutWidth(props), height,\n        legendData,\n        title,\n        width }, labelComponent.props));\n    // Returns the tooltip component\n    const getTooltipComponent = () => {\n        // There must be at least one active, visible item or else this will return zero for height & width.\n        const legendSize = getLegendTooltipSize(legendTooltipProps());\n        if (legendSize.height === 0 && legendSize.width === 0) {\n            return null;\n        }\n        const _flyoutWidth = getFlyoutWidth(legendSize);\n        const tooltipComponent = isCursorTooltip ? React.createElement(ChartCursorTooltip, null) : React.createElement(ChartTooltip, null);\n        return React.cloneElement(tooltipComponent, Object.assign(Object.assign(Object.assign({ activePoints,\n            center,\n            datum, flyoutHeight: flyoutHeight || getFlyoutHeight(legendSize), flyoutWidth: flyoutWidth || getFlyoutWidth(legendSize), height, labelComponent: getTooltipContentComponent(legendSize) }, (flyoutWidth === undefined && {\n            showPointer: width > _flyoutWidth + center.x + pointerLength || center.x > _flyoutWidth + pointerLength\n        })), { text,\n            theme,\n            width }), rest));\n    };\n    return getTooltipComponent();\n};\nChartLegendTooltip.displayName = 'ChartLegendTooltip';\n// Note: VictoryTooltip.defaultEvents must be hoisted\nhoistNonReactStatics(ChartLegendTooltip, VictoryTooltip);\n//# sourceMappingURL=ChartLegendTooltip.js.map"]},"metadata":{},"sourceType":"module"}