{"ast":null,"code":"import { __rest } from \"tslib\";\nimport defaults from 'lodash/defaults';\nimport { Helpers, TextSize } from 'victory-core';\nimport { VictoryLegend } from 'victory-legend';\nimport { ChartCommonStyles } from '../ChartTheme';\nimport { getPieOrigin } from './chart-origin';\nimport * as React from 'react'; // Returns a legend which has been positioned per the given chart properties\n\nexport var getComputedLegend = function getComputedLegend(_ref) {\n  var _ref$allowWrap = _ref.allowWrap,\n      allowWrap = _ref$allowWrap === void 0 ? true : _ref$allowWrap,\n      _ref$chartType = _ref.chartType,\n      chartType = _ref$chartType === void 0 ? 'chart' : _ref$chartType,\n      _ref$dx = _ref.dx,\n      dx = _ref$dx === void 0 ? 0 : _ref$dx,\n      _ref$dy = _ref.dy,\n      dy = _ref$dy === void 0 ? 0 : _ref$dy,\n      height = _ref.height,\n      legendComponent = _ref.legendComponent,\n      padding = _ref.padding,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? ChartCommonStyles.legend.position : _ref$position,\n      theme = _ref.theme,\n      width = _ref.width,\n      _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? theme.legend.orientation : _ref$orientation;\n  // Get the number of legend items per row\n  var legendItemsProps = legendComponent.props ? legendComponent.props : {};\n  var legendItemsPerRow = allowWrap ? getLegendItemsPerRow({\n    chartType: chartType,\n    dx: dx,\n    height: height,\n    legendData: legendItemsProps.data,\n    legendOrientation: legendItemsProps.legendOrientation ? legendItemsProps.legendOrientation : orientation,\n    legendPosition: position,\n    legendProps: legendItemsProps,\n    padding: padding,\n    theme: theme,\n    width: width\n  }) : undefined; // Include new itemsPerRow prop when determining x and y position\n\n  var legendPositionProps = defaults({}, legendComponent.props, {\n    itemsPerRow: legendItemsPerRow\n  });\n  var legendX = getLegendX({\n    chartType: chartType,\n    dx: dx,\n    height: height,\n    legendData: legendPositionProps.data,\n    legendOrientation: legendPositionProps.legendOrientation ? legendPositionProps.legendOrientation : orientation,\n    legendPosition: position,\n    legendProps: legendPositionProps,\n    padding: padding,\n    theme: theme,\n    width: width\n  });\n  var legendY = getLegendY({\n    chartType: chartType,\n    dy: dy,\n    height: height,\n    legendData: legendPositionProps.data,\n    legendOrientation: legendPositionProps.legendOrientation ? legendPositionProps.legendOrientation : orientation,\n    legendProps: legendPositionProps,\n    legendPosition: position,\n    padding: padding,\n    theme: theme,\n    width: width\n  }); // Clone legend with updated props\n\n  var legendProps = defaults({}, legendComponent.props, {\n    itemsPerRow: legendItemsPerRow,\n    orientation: orientation,\n    standalone: false,\n    theme: theme,\n    x: legendX > 0 ? legendX : 0,\n    y: legendY > 0 ? legendY : 0\n  });\n  return React.cloneElement(legendComponent, legendProps);\n}; // Returns legend dimensions\n\nexport var getLegendDimensions = function getLegendDimensions(_ref2) {\n  var legendData = _ref2.legendData,\n      legendOrientation = _ref2.legendOrientation,\n      legendProps = _ref2.legendProps,\n      theme = _ref2.theme;\n\n  if (legendData || legendProps.data) {\n    return VictoryLegend.getDimensions(Object.assign({\n      data: legendData,\n      orientation: legendOrientation,\n      theme: theme\n    }, legendProps // override above\n    ));\n  }\n\n  return {};\n}; // Returns true if the legend is smaller than its container\n\nexport var doesLegendFit = function doesLegendFit(_ref3) {\n  var _ref3$dx = _ref3.dx,\n      dx = _ref3$dx === void 0 ? 0 : _ref3$dx,\n      height = _ref3.height,\n      legendPosition = _ref3.legendPosition,\n      legendData = _ref3.legendData,\n      legendOrientation = _ref3.legendOrientation,\n      legendProps = _ref3.legendProps,\n      padding = _ref3.padding,\n      theme = _ref3.theme,\n      width = _ref3.width;\n\n  var _Helpers$getPadding = Helpers.getPadding({\n    padding: padding\n  }),\n      left = _Helpers$getPadding.left,\n      right = _Helpers$getPadding.right;\n\n  var chartSize = {\n    height: height,\n    width: width - left - right\n  };\n  var legendDimensions = getLegendDimensions({\n    legendData: legendData,\n    legendOrientation: legendOrientation,\n    legendProps: legendProps,\n    theme: theme\n  });\n  var occupiedWidth = 0;\n\n  switch (legendPosition) {\n    case 'bottom-left':\n      occupiedWidth = left + dx;\n      break;\n\n    case 'right':\n      occupiedWidth = chartSize.width + ChartCommonStyles.legend.margin + left + dx;\n      break;\n\n    default:\n      occupiedWidth = dx;\n      break;\n  }\n\n  return width - occupiedWidth > legendDimensions.width;\n}; // Returns the number of legend items per row\n\nexport var getLegendItemsPerRow = function getLegendItemsPerRow(_ref4) {\n  var dx = _ref4.dx,\n      height = _ref4.height,\n      legendPosition = _ref4.legendPosition,\n      legendData = _ref4.legendData,\n      legendOrientation = _ref4.legendOrientation,\n      legendProps = _ref4.legendProps,\n      padding = _ref4.padding,\n      theme = _ref4.theme,\n      width = _ref4.width;\n  var itemsPerRow = legendData ? legendData.length : 0;\n\n  for (var i = itemsPerRow; i > 0; i--) {\n    var fits = doesLegendFit({\n      dx: dx,\n      height: height,\n      legendPosition: legendPosition,\n      legendData: legendData,\n      legendOrientation: legendOrientation,\n      legendProps: Object.assign(Object.assign({}, legendProps), {\n        itemsPerRow: i\n      }),\n      padding: padding,\n      theme: theme,\n      width: width\n    });\n\n    if (fits) {\n      itemsPerRow = i;\n      break;\n    }\n  }\n\n  return itemsPerRow;\n}; // Returns x coordinate for legend\n\nexport var getLegendX = function getLegendX(_a) {\n  var chartType = _a.chartType,\n      rest = __rest(_a, [\"chartType\"]);\n\n  return chartType === 'pie' ? getPieLegendX(rest) : getChartLegendX(rest);\n}; // Returns y coordinate for legend\n\nexport var getLegendY = function getLegendY(_a) {\n  var chartType = _a.chartType,\n      rest = __rest(_a, [\"chartType\"]);\n\n  switch (chartType) {\n    case 'pie':\n      return getPieLegendY(rest);\n\n    case 'bullet':\n      return getBulletLegendY(rest);\n\n    default:\n      return getChartLegendY(rest);\n  }\n}; // Returns y coordinate for bullet legends\n\nexport var getBulletLegendY = function getBulletLegendY(_ref5) {\n  var _ref5$dy = _ref5.dy,\n      dy = _ref5$dy === void 0 ? 0 : _ref5$dy,\n      height = _ref5.height,\n      legendPosition = _ref5.legendPosition,\n      legendData = _ref5.legendData,\n      legendOrientation = _ref5.legendOrientation,\n      legendProps = _ref5.legendProps,\n      padding = _ref5.padding,\n      theme = _ref5.theme,\n      width = _ref5.width;\n\n  var _Helpers$getPadding2 = Helpers.getPadding({\n    padding: padding\n  }),\n      left = _Helpers$getPadding2.left,\n      right = _Helpers$getPadding2.right;\n\n  var chartSize = {\n    height: height,\n    width: width - left - right\n  };\n\n  switch (legendPosition) {\n    case 'bottom':\n    case 'bottom-left':\n      return chartSize.height + ChartCommonStyles.legend.margin + dy;\n\n    case 'right':\n      {\n        // Legend height with padding\n        var legendDimensions = getLegendDimensions({\n          legendData: legendData,\n          legendOrientation: legendOrientation,\n          legendProps: legendProps,\n          theme: theme\n        });\n\n        var legendPadding = function legendPadding(legendDataArr) {\n          return legendDataArr && legendDataArr.length > 0 ? 17 : 0;\n        };\n\n        return (chartSize.height - legendDimensions.height) / 2 + legendPadding(legendData);\n      }\n\n    default:\n      return dy;\n  }\n}; // Returns x coordinate for chart legends\n\nexport var getChartLegendX = function getChartLegendX(_ref6) {\n  var _ref6$dx = _ref6.dx,\n      dx = _ref6$dx === void 0 ? 0 : _ref6$dx,\n      height = _ref6.height,\n      legendData = _ref6.legendData,\n      legendOrientation = _ref6.legendOrientation,\n      legendPosition = _ref6.legendPosition,\n      legendProps = _ref6.legendProps,\n      padding = _ref6.padding,\n      theme = _ref6.theme,\n      width = _ref6.width;\n\n  var _Helpers$getPadding3 = Helpers.getPadding({\n    padding: padding\n  }),\n      top = _Helpers$getPadding3.top,\n      bottom = _Helpers$getPadding3.bottom,\n      left = _Helpers$getPadding3.left,\n      right = _Helpers$getPadding3.right;\n\n  var chartSize = {\n    height: Math.abs(height - (bottom + top)),\n    width: Math.abs(width - (left + right))\n  };\n  var legendDimensions = getLegendDimensions({\n    legendData: legendData,\n    legendOrientation: legendOrientation,\n    legendProps: legendProps,\n    theme: theme\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return width > legendDimensions.width ? Math.round((width - legendDimensions.width) / 2) + dx : dx;\n\n    case 'bottom-left':\n      return left + dx;\n\n    case 'right':\n      return chartSize.width + ChartCommonStyles.legend.margin + left + dx;\n\n    default:\n      return dx;\n  }\n}; // Returns y coordinate for chart legends\n\nexport var getChartLegendY = function getChartLegendY(_ref7) {\n  var _ref7$dy = _ref7.dy,\n      dy = _ref7$dy === void 0 ? 0 : _ref7$dy,\n      height = _ref7.height,\n      legendPosition = _ref7.legendPosition,\n      legendData = _ref7.legendData,\n      legendOrientation = _ref7.legendOrientation,\n      legendProps = _ref7.legendProps,\n      padding = _ref7.padding,\n      theme = _ref7.theme,\n      width = _ref7.width;\n\n  var _Helpers$getPadding4 = Helpers.getPadding({\n    padding: padding\n  }),\n      top = _Helpers$getPadding4.top,\n      bottom = _Helpers$getPadding4.bottom,\n      left = _Helpers$getPadding4.left,\n      right = _Helpers$getPadding4.right;\n\n  var chartSize = {\n    height: Math.abs(height - (bottom + top)),\n    width: Math.abs(width - (left + right))\n  };\n\n  switch (legendPosition) {\n    case 'bottom':\n    case 'bottom-left':\n      return chartSize.height + ChartCommonStyles.legend.margin * 2 + top + dy;\n\n    case 'right':\n      {\n        // Legend height with padding\n        var legendDimensions = getLegendDimensions({\n          legendData: legendData,\n          legendOrientation: legendOrientation,\n          legendProps: legendProps,\n          theme: theme\n        });\n        var originX = chartSize.height / 2 + top;\n\n        var legendPadding = function legendPadding(legendDataArr) {\n          return legendDataArr && legendDataArr.length > 0 ? 2 : 0;\n        };\n\n        return originX - legendDimensions.height / 2 + legendPadding(legendData);\n      }\n\n    default:\n      return dy;\n  }\n}; // Returns x coordinate for pie legends\n\nexport var getPieLegendX = function getPieLegendX(_ref8) {\n  var _ref8$dx = _ref8.dx,\n      dx = _ref8$dx === void 0 ? 0 : _ref8$dx,\n      height = _ref8.height,\n      legendData = _ref8.legendData,\n      legendOrientation = _ref8.legendOrientation,\n      legendPosition = _ref8.legendPosition,\n      legendProps = _ref8.legendProps,\n      padding = _ref8.padding,\n      theme = _ref8.theme,\n      width = _ref8.width;\n  var origin = getPieOrigin({\n    height: height,\n    padding: padding,\n    width: width\n  });\n  var radius = Helpers.getRadius({\n    height: height,\n    width: width,\n    padding: padding\n  });\n  var legendDimensions = getLegendDimensions({\n    legendData: legendData,\n    legendOrientation: legendOrientation,\n    legendProps: legendProps,\n    theme: theme\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return width > legendDimensions.width ? Math.round((width - legendDimensions.width) / 2) + dx : dx;\n\n    case 'right':\n      return origin.x + ChartCommonStyles.label.margin + dx + radius;\n\n    default:\n      return dx;\n  }\n}; // Returns y coordinate for pie legends\n\nexport var getPieLegendY = function getPieLegendY(_ref9) {\n  var _ref9$dy = _ref9.dy,\n      dy = _ref9$dy === void 0 ? 0 : _ref9$dy,\n      height = _ref9.height,\n      legendPosition = _ref9.legendPosition,\n      legendData = _ref9.legendData,\n      legendOrientation = _ref9.legendOrientation,\n      legendProps = _ref9.legendProps,\n      padding = _ref9.padding,\n      theme = _ref9.theme,\n      width = _ref9.width;\n  var origin = getPieOrigin({\n    height: height,\n    padding: padding,\n    width: width\n  });\n  var radius = Helpers.getRadius({\n    height: height,\n    width: width,\n    padding: padding\n  });\n\n  switch (legendPosition) {\n    case 'bottom':\n      return origin.y + ChartCommonStyles.legend.margin + radius + dy;\n\n    case 'right':\n      {\n        // Legend height with padding\n        var legendDimensions = getLegendDimensions({\n          legendData: legendData,\n          legendOrientation: legendOrientation,\n          legendProps: legendProps,\n          theme: theme\n        });\n\n        var legendPadding = function legendPadding(legendDataArr) {\n          return legendDataArr && legendDataArr.length > 0 ? 2 : 0;\n        };\n\n        return origin.y - legendDimensions.height / 2 + legendPadding(legendData);\n      }\n\n    default:\n      return dy;\n  }\n}; // Returns an approximation of longest text width based on legend styles\n\nexport var getMaxLegendTextSize = function getMaxLegendTextSize(_ref10) {\n  var legendData = _ref10.legendData,\n      theme = _ref10.theme;\n  var style = theme && theme.legend && theme.legend.style ? theme.legend.style.labels : undefined;\n\n  if (!(legendData && legendData.length)) {\n    return 0;\n  }\n\n  var result = '';\n  legendData.forEach(function (data) {\n    if (data.name && data.name.length > result.length) {\n      result = data.name;\n    }\n  }); // The approximateTextSize function returns height and width, but Victory incorrectly typed it as number\n\n  var adjustedTextSize = TextSize.approximateTextSize(result, Object.assign({}, style));\n  return adjustedTextSize.width;\n};","map":{"version":3,"sources":["../../../../src/components/ChartUtils/chart-legend.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport defaults from 'lodash/defaults';\nimport { Helpers, TextSize } from 'victory-core';\nimport { VictoryLegend } from 'victory-legend';\nimport { ChartCommonStyles } from '../ChartTheme';\nimport { getPieOrigin } from './chart-origin';\nimport * as React from 'react';\n// Returns a legend which has been positioned per the given chart properties\nexport const getComputedLegend = ({ allowWrap = true, chartType = 'chart', dx = 0, dy = 0, height, legendComponent, padding, position = ChartCommonStyles.legend.position, theme, width, \n// destructure last\norientation = theme.legend.orientation }) => {\n    // Get the number of legend items per row\n    const legendItemsProps = legendComponent.props ? legendComponent.props : {};\n    const legendItemsPerRow = allowWrap\n        ? getLegendItemsPerRow({\n            chartType,\n            dx,\n            height,\n            legendData: legendItemsProps.data,\n            legendOrientation: legendItemsProps.legendOrientation ? legendItemsProps.legendOrientation : orientation,\n            legendPosition: position,\n            legendProps: legendItemsProps,\n            padding,\n            theme,\n            width\n        })\n        : undefined;\n    // Include new itemsPerRow prop when determining x and y position\n    const legendPositionProps = defaults({}, legendComponent.props, {\n        itemsPerRow: legendItemsPerRow\n    });\n    const legendX = getLegendX({\n        chartType,\n        dx,\n        height,\n        legendData: legendPositionProps.data,\n        legendOrientation: legendPositionProps.legendOrientation ? legendPositionProps.legendOrientation : orientation,\n        legendPosition: position,\n        legendProps: legendPositionProps,\n        padding,\n        theme,\n        width\n    });\n    const legendY = getLegendY({\n        chartType,\n        dy,\n        height,\n        legendData: legendPositionProps.data,\n        legendOrientation: legendPositionProps.legendOrientation ? legendPositionProps.legendOrientation : orientation,\n        legendProps: legendPositionProps,\n        legendPosition: position,\n        padding,\n        theme,\n        width\n    });\n    // Clone legend with updated props\n    const legendProps = defaults({}, legendComponent.props, {\n        itemsPerRow: legendItemsPerRow,\n        orientation,\n        standalone: false,\n        theme,\n        x: legendX > 0 ? legendX : 0,\n        y: legendY > 0 ? legendY : 0\n    });\n    return React.cloneElement(legendComponent, legendProps);\n};\n// Returns legend dimensions\nexport const getLegendDimensions = ({ legendData, legendOrientation, legendProps, theme }) => {\n    if (legendData || legendProps.data) {\n        return VictoryLegend.getDimensions(Object.assign({ data: legendData, orientation: legendOrientation, theme }, legendProps // override above\n        ));\n    }\n    return {};\n};\n// Returns true if the legend is smaller than its container\nexport const doesLegendFit = ({ dx = 0, height, legendPosition, legendData, legendOrientation, legendProps, padding, theme, width }) => {\n    const { left, right } = Helpers.getPadding({ padding });\n    const chartSize = {\n        height,\n        width: width - left - right\n    };\n    const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n    });\n    let occupiedWidth = 0;\n    switch (legendPosition) {\n        case 'bottom-left':\n            occupiedWidth = left + dx;\n            break;\n        case 'right':\n            occupiedWidth = chartSize.width + ChartCommonStyles.legend.margin + left + dx;\n            break;\n        default:\n            occupiedWidth = dx;\n            break;\n    }\n    return width - occupiedWidth > legendDimensions.width;\n};\n// Returns the number of legend items per row\nexport const getLegendItemsPerRow = ({ dx, height, legendPosition, legendData, legendOrientation, legendProps, padding, theme, width }) => {\n    let itemsPerRow = legendData ? legendData.length : 0;\n    for (let i = itemsPerRow; i > 0; i--) {\n        const fits = doesLegendFit({\n            dx,\n            height,\n            legendPosition,\n            legendData,\n            legendOrientation,\n            legendProps: Object.assign(Object.assign({}, legendProps), { itemsPerRow: i }),\n            padding,\n            theme,\n            width\n        });\n        if (fits) {\n            itemsPerRow = i;\n            break;\n        }\n    }\n    return itemsPerRow;\n};\n// Returns x coordinate for legend\nexport const getLegendX = (_a) => {\n    var { chartType } = _a, rest = __rest(_a, [\"chartType\"]);\n    return chartType === 'pie' ? getPieLegendX(rest) : getChartLegendX(rest);\n};\n// Returns y coordinate for legend\nexport const getLegendY = (_a) => {\n    var { chartType } = _a, rest = __rest(_a, [\"chartType\"]);\n    switch (chartType) {\n        case 'pie':\n            return getPieLegendY(rest);\n        case 'bullet':\n            return getBulletLegendY(rest);\n        default:\n            return getChartLegendY(rest);\n    }\n};\n// Returns y coordinate for bullet legends\nexport const getBulletLegendY = ({ dy = 0, height, legendPosition, legendData, legendOrientation, legendProps, padding, theme, width }) => {\n    const { left, right } = Helpers.getPadding({ padding });\n    const chartSize = {\n        height,\n        width: width - left - right\n    };\n    switch (legendPosition) {\n        case 'bottom':\n        case 'bottom-left':\n            return chartSize.height + ChartCommonStyles.legend.margin + dy;\n        case 'right': {\n            // Legend height with padding\n            const legendDimensions = getLegendDimensions({\n                legendData,\n                legendOrientation,\n                legendProps,\n                theme\n            });\n            const legendPadding = (legendDataArr) => (legendDataArr && legendDataArr.length > 0 ? 17 : 0);\n            return (chartSize.height - legendDimensions.height) / 2 + legendPadding(legendData);\n        }\n        default:\n            return dy;\n    }\n};\n// Returns x coordinate for chart legends\nexport const getChartLegendX = ({ dx = 0, height, legendData, legendOrientation, legendPosition, legendProps, padding, theme, width }) => {\n    const { top, bottom, left, right } = Helpers.getPadding({ padding });\n    const chartSize = {\n        height: Math.abs(height - (bottom + top)),\n        width: Math.abs(width - (left + right))\n    };\n    const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n    });\n    switch (legendPosition) {\n        case 'bottom':\n            return width > legendDimensions.width ? Math.round((width - legendDimensions.width) / 2) + dx : dx;\n        case 'bottom-left':\n            return left + dx;\n        case 'right':\n            return chartSize.width + ChartCommonStyles.legend.margin + left + dx;\n        default:\n            return dx;\n    }\n};\n// Returns y coordinate for chart legends\nexport const getChartLegendY = ({ dy = 0, height, legendPosition, legendData, legendOrientation, legendProps, padding, theme, width }) => {\n    const { top, bottom, left, right } = Helpers.getPadding({ padding });\n    const chartSize = {\n        height: Math.abs(height - (bottom + top)),\n        width: Math.abs(width - (left + right))\n    };\n    switch (legendPosition) {\n        case 'bottom':\n        case 'bottom-left':\n            return chartSize.height + ChartCommonStyles.legend.margin * 2 + top + dy;\n        case 'right': {\n            // Legend height with padding\n            const legendDimensions = getLegendDimensions({\n                legendData,\n                legendOrientation,\n                legendProps,\n                theme\n            });\n            const originX = chartSize.height / 2 + top;\n            const legendPadding = (legendDataArr) => (legendDataArr && legendDataArr.length > 0 ? 2 : 0);\n            return originX - legendDimensions.height / 2 + legendPadding(legendData);\n        }\n        default:\n            return dy;\n    }\n};\n// Returns x coordinate for pie legends\nexport const getPieLegendX = ({ dx = 0, height, legendData, legendOrientation, legendPosition, legendProps, padding, theme, width }) => {\n    const origin = getPieOrigin({ height, padding, width });\n    const radius = Helpers.getRadius({ height, width, padding });\n    const legendDimensions = getLegendDimensions({\n        legendData,\n        legendOrientation,\n        legendProps,\n        theme\n    });\n    switch (legendPosition) {\n        case 'bottom':\n            return width > legendDimensions.width ? Math.round((width - legendDimensions.width) / 2) + dx : dx;\n        case 'right':\n            return origin.x + ChartCommonStyles.label.margin + dx + radius;\n        default:\n            return dx;\n    }\n};\n// Returns y coordinate for pie legends\nexport const getPieLegendY = ({ dy = 0, height, legendPosition, legendData, legendOrientation, legendProps, padding, theme, width }) => {\n    const origin = getPieOrigin({ height, padding, width });\n    const radius = Helpers.getRadius({ height, width, padding });\n    switch (legendPosition) {\n        case 'bottom':\n            return origin.y + ChartCommonStyles.legend.margin + radius + dy;\n        case 'right': {\n            // Legend height with padding\n            const legendDimensions = getLegendDimensions({\n                legendData,\n                legendOrientation,\n                legendProps,\n                theme\n            });\n            const legendPadding = (legendDataArr) => (legendDataArr && legendDataArr.length > 0 ? 2 : 0);\n            return origin.y - legendDimensions.height / 2 + legendPadding(legendData);\n        }\n        default:\n            return dy;\n    }\n};\n// Returns an approximation of longest text width based on legend styles\nexport const getMaxLegendTextSize = ({ legendData, theme }) => {\n    const style = theme && theme.legend && theme.legend.style ? theme.legend.style.labels : undefined;\n    if (!(legendData && legendData.length)) {\n        return 0;\n    }\n    let result = '';\n    legendData.forEach(data => {\n        if (data.name && data.name.length > result.length) {\n            result = data.name;\n        }\n    });\n    // The approximateTextSize function returns height and width, but Victory incorrectly typed it as number\n    const adjustedTextSize = TextSize.approximateTextSize(result, Object.assign({}, style));\n    return adjustedTextSize.width;\n};\n//# sourceMappingURL=chart-legend.js.map"]},"metadata":{},"sourceType":"module"}