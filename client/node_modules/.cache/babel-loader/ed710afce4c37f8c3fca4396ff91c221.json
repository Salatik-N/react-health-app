{"ast":null,"code":"import _toConsumableArray from \"C:/Users/37529/react-apps/health-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:/Users/37529/react-apps/health-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { getPrimaryDotMeasureData, getComparativeErrorMeasureData, getComparativeWarningMeasureData, getPrimarySegmentedMeasureData, getQualitativeRangeData } from './chart-bullet-data';\nimport { getBulletTheme } from '../../ChartUtils';\n\nvar getLegendColorScale = function getLegendColorScale(computedData, legendData) {\n  var colorScale = [];\n  legendData.forEach(function (data, index) {\n    var _iterator = _createForOfIteratorHelper(computedData),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var i = _step.value;\n\n        if (index === i._index) {\n          colorScale.push(i._color);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  });\n  return colorScale;\n};\n\nexport var getColorScale = function getColorScale(_ref) {\n  var comparativeErrorMeasureData = _ref.comparativeErrorMeasureData,\n      comparativeErrorMeasureLegendData = _ref.comparativeErrorMeasureLegendData,\n      comparativeWarningMeasureData = _ref.comparativeWarningMeasureData,\n      comparativeWarningMeasureLegendData = _ref.comparativeWarningMeasureLegendData,\n      invert = _ref.invert,\n      primaryDotMeasureData = _ref.primaryDotMeasureData,\n      primaryDotMeasureLegendData = _ref.primaryDotMeasureLegendData,\n      primarySegmentedMeasureData = _ref.primarySegmentedMeasureData,\n      primarySegmentedMeasureLegendData = _ref.primarySegmentedMeasureLegendData,\n      qualitativeRangeData = _ref.qualitativeRangeData,\n      qualitativeRangeLegendData = _ref.qualitativeRangeLegendData,\n      themeColor = _ref.themeColor,\n      themeVariant = _ref.themeVariant;\n  var colorScale = [];\n\n  if (primaryDotMeasureLegendData && primaryDotMeasureLegendData.length) {\n    var computedData = getPrimaryDotMeasureData({\n      data: primaryDotMeasureData,\n      invert: invert\n    });\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(computedData, primaryDotMeasureLegendData)));\n  }\n\n  if (primarySegmentedMeasureLegendData && primarySegmentedMeasureLegendData.length) {\n    var _computedData = getPrimarySegmentedMeasureData({\n      data: primarySegmentedMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData, primarySegmentedMeasureLegendData)));\n  }\n\n  if (comparativeWarningMeasureLegendData && comparativeWarningMeasureLegendData.length) {\n    var _computedData2 = getComparativeWarningMeasureData({\n      data: comparativeWarningMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData2, comparativeWarningMeasureLegendData)));\n  }\n\n  if (comparativeErrorMeasureLegendData && comparativeErrorMeasureLegendData.length) {\n    var _computedData3 = getComparativeErrorMeasureData({\n      data: comparativeErrorMeasureData,\n      invert: invert,\n      themeColor: themeColor,\n      themeVariant: themeVariant\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData3, comparativeErrorMeasureLegendData)));\n  }\n\n  if (qualitativeRangeLegendData && qualitativeRangeLegendData.length) {\n    var _computedData4 = getQualitativeRangeData({\n      data: qualitativeRangeData,\n      invert: invert\n    });\n\n    colorScale.push.apply(colorScale, _toConsumableArray(getLegendColorScale(_computedData4, qualitativeRangeLegendData)));\n  }\n\n  return colorScale;\n}; // Get bullet chart theme with legend color scale\n\nexport var getBulletThemeWithLegendColorScale = function getBulletThemeWithLegendColorScale(_ref2) {\n  var comparativeErrorMeasureData = _ref2.comparativeErrorMeasureData,\n      comparativeErrorMeasureLegendData = _ref2.comparativeErrorMeasureLegendData,\n      comparativeWarningMeasureData = _ref2.comparativeWarningMeasureData,\n      comparativeWarningMeasureLegendData = _ref2.comparativeWarningMeasureLegendData,\n      invert = _ref2.invert,\n      primaryDotMeasureData = _ref2.primaryDotMeasureData,\n      primaryDotMeasureLegendData = _ref2.primaryDotMeasureLegendData,\n      primarySegmentedMeasureData = _ref2.primarySegmentedMeasureData,\n      primarySegmentedMeasureLegendData = _ref2.primarySegmentedMeasureLegendData,\n      qualitativeRangeData = _ref2.qualitativeRangeData,\n      qualitativeRangeLegendData = _ref2.qualitativeRangeLegendData,\n      themeColor = _ref2.themeColor,\n      themeVariant = _ref2.themeVariant;\n  var colorScale = getColorScale({\n    comparativeErrorMeasureData: comparativeErrorMeasureData,\n    comparativeErrorMeasureLegendData: comparativeErrorMeasureLegendData,\n    comparativeWarningMeasureData: comparativeWarningMeasureData,\n    comparativeWarningMeasureLegendData: comparativeWarningMeasureLegendData,\n    invert: invert,\n    primaryDotMeasureData: primaryDotMeasureData,\n    primaryDotMeasureLegendData: primaryDotMeasureLegendData,\n    primarySegmentedMeasureData: primarySegmentedMeasureData,\n    primarySegmentedMeasureLegendData: primarySegmentedMeasureLegendData,\n    qualitativeRangeData: qualitativeRangeData,\n    qualitativeRangeLegendData: qualitativeRangeLegendData,\n    themeColor: themeColor,\n    themeVariant: themeVariant\n  });\n  var theme = getBulletTheme(themeColor, themeVariant);\n  theme.legend.colorScale = _toConsumableArray(colorScale);\n  return theme;\n};","map":{"version":3,"sources":["../../../../../src/components/ChartBullet/utils/chart-bullet-theme.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getPrimaryDotMeasureData, getComparativeErrorMeasureData, getComparativeWarningMeasureData, getPrimarySegmentedMeasureData, getQualitativeRangeData } from './chart-bullet-data';\nimport { getBulletTheme } from '../../ChartUtils';\nconst getLegendColorScale = (computedData, legendData) => {\n    const colorScale = [];\n    legendData.forEach((data, index) => {\n        for (const i of computedData) {\n            if (index === i._index) {\n                colorScale.push(i._color);\n            }\n        }\n    });\n    return colorScale;\n};\nexport const getColorScale = ({ comparativeErrorMeasureData, comparativeErrorMeasureLegendData, comparativeWarningMeasureData, comparativeWarningMeasureLegendData, invert, primaryDotMeasureData, primaryDotMeasureLegendData, primarySegmentedMeasureData, primarySegmentedMeasureLegendData, qualitativeRangeData, qualitativeRangeLegendData, themeColor, themeVariant }) => {\n    const colorScale = [];\n    if (primaryDotMeasureLegendData && primaryDotMeasureLegendData.length) {\n        const computedData = getPrimaryDotMeasureData({\n            data: primaryDotMeasureData,\n            invert\n        });\n        colorScale.push(...getLegendColorScale(computedData, primaryDotMeasureLegendData));\n    }\n    if (primarySegmentedMeasureLegendData && primarySegmentedMeasureLegendData.length) {\n        const computedData = getPrimarySegmentedMeasureData({\n            data: primarySegmentedMeasureData,\n            invert,\n            themeColor,\n            themeVariant\n        });\n        colorScale.push(...getLegendColorScale(computedData, primarySegmentedMeasureLegendData));\n    }\n    if (comparativeWarningMeasureLegendData && comparativeWarningMeasureLegendData.length) {\n        const computedData = getComparativeWarningMeasureData({\n            data: comparativeWarningMeasureData,\n            invert,\n            themeColor,\n            themeVariant\n        });\n        colorScale.push(...getLegendColorScale(computedData, comparativeWarningMeasureLegendData));\n    }\n    if (comparativeErrorMeasureLegendData && comparativeErrorMeasureLegendData.length) {\n        const computedData = getComparativeErrorMeasureData({\n            data: comparativeErrorMeasureData,\n            invert,\n            themeColor,\n            themeVariant\n        });\n        colorScale.push(...getLegendColorScale(computedData, comparativeErrorMeasureLegendData));\n    }\n    if (qualitativeRangeLegendData && qualitativeRangeLegendData.length) {\n        const computedData = getQualitativeRangeData({\n            data: qualitativeRangeData,\n            invert\n        });\n        colorScale.push(...getLegendColorScale(computedData, qualitativeRangeLegendData));\n    }\n    return colorScale;\n};\n// Get bullet chart theme with legend color scale\nexport const getBulletThemeWithLegendColorScale = ({ comparativeErrorMeasureData, comparativeErrorMeasureLegendData, comparativeWarningMeasureData, comparativeWarningMeasureLegendData, invert, primaryDotMeasureData, primaryDotMeasureLegendData, primarySegmentedMeasureData, primarySegmentedMeasureLegendData, qualitativeRangeData, qualitativeRangeLegendData, themeColor, themeVariant }) => {\n    const colorScale = getColorScale({\n        comparativeErrorMeasureData,\n        comparativeErrorMeasureLegendData,\n        comparativeWarningMeasureData,\n        comparativeWarningMeasureLegendData,\n        invert,\n        primaryDotMeasureData,\n        primaryDotMeasureLegendData,\n        primarySegmentedMeasureData,\n        primarySegmentedMeasureLegendData,\n        qualitativeRangeData,\n        qualitativeRangeLegendData,\n        themeColor,\n        themeVariant\n    });\n    const theme = getBulletTheme(themeColor, themeVariant);\n    theme.legend.colorScale = [...colorScale];\n    return theme;\n};\n//# sourceMappingURL=chart-bullet-theme.js.map"]},"metadata":{},"sourceType":"module"}