{"ast":null,"code":"import _toConsumableArray from \"C:/Users/37529/react-apps/health-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/* eslint-disable camelcase */\nimport chart_area_Opacity from \"@patternfly/react-tokens/dist/esm/chart_area_Opacity\";\nimport chart_color_black_500 from \"@patternfly/react-tokens/dist/esm/chart_color_black_500\"; // Returns child names for each series, except given ID index\n\nvar getChildNames = function getChildNames(_ref) {\n  var chartNames = _ref.chartNames,\n      omitIndex = _ref.omitIndex;\n  var result = [];\n  chartNames.map(function (chartName, index) {\n    if (index !== omitIndex) {\n      if (Array.isArray(chartName)) {\n        chartName.forEach(function (name) {\n          return result.push(name);\n        });\n      } else {\n        result.push(chartName);\n      }\n    }\n  });\n  return result;\n}; // Returns events for an interactive legend\n\n\nexport var getInteractiveLegendEvents = function getInteractiveLegendEvents(props) {\n  return [].concat(_toConsumableArray(getInteractiveLegendTargetEvents(Object.assign(Object.assign({}, props), {\n    target: 'data'\n  }))), _toConsumableArray(getInteractiveLegendTargetEvents(Object.assign(Object.assign({}, props), {\n    target: 'labels'\n  }))));\n}; // Returns legend items, except given ID index\n\nvar getInteractiveLegendItems = function getInteractiveLegendItems(_ref2) {\n  var chartNames = _ref2.chartNames,\n      omitIndex = _ref2.omitIndex;\n  var result = [];\n  chartNames.map(function (_, index) {\n    if (index !== omitIndex) {\n      result.push(index);\n    }\n  });\n  return result;\n}; // Returns styles for interactive legend items\n\n\nexport var getInteractiveLegendItemStyles = function getInteractiveLegendItemStyles() {\n  var hidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return !hidden ? {} : {\n    labels: {\n      fill: chart_color_black_500.value\n    },\n    symbol: {\n      fill: chart_color_black_500.value,\n      type: 'eyeSlash'\n    }\n  };\n}; // Returns targeted events for legend 'data' or 'labels'\n\nvar getInteractiveLegendTargetEvents = function getInteractiveLegendTargetEvents(_ref3) {\n  var chartNames = _ref3.chartNames,\n      _ref3$isDataHidden = _ref3.isDataHidden,\n      isDataHidden = _ref3$isDataHidden === void 0 ? function () {\n    return false;\n  } : _ref3$isDataHidden,\n      _ref3$isHidden = _ref3.isHidden,\n      isHidden = _ref3$isHidden === void 0 ? function () {\n    return false;\n  } : _ref3$isHidden,\n      legendName = _ref3.legendName,\n      _ref3$onLegendClick = _ref3.onLegendClick,\n      onLegendClick = _ref3$onLegendClick === void 0 ? function () {\n    return null;\n  } : _ref3$onLegendClick,\n      target = _ref3.target;\n\n  if (chartNames === undefined || legendName === undefined) {\n    // eslint-disable-next-line no-console\n    console.error('getInteractiveLegendTargetEvents:', 'requires chartNames and legendName to be specified');\n    return [];\n  }\n\n  return chartNames.map(function (_, index) {\n    // Get IDs to attach events to, except the IDs associated with this event.\n    //\n    // For example, if the current event key is 0, we need IDs associated with events 1 and 2. If the current event\n    // key is 1, we need IDs associated with events 0 and 2. And so on...\n    var childNames = getChildNames({\n      chartNames: chartNames,\n      legendName: legendName,\n      omitIndex: index\n    });\n    var legendItems = getInteractiveLegendItems({\n      chartNames: chartNames,\n      legendName: legendName,\n      omitIndex: index\n    });\n    return {\n      childName: legendName,\n      target: target,\n      eventKey: index,\n      eventHandlers: {\n        onClick: function onClick() {\n          return [{\n            // Hide each data series individually\n            target: 'data',\n            mutation: function mutation(props) {\n              onLegendClick(props);\n              return null;\n            }\n          }];\n        },\n        onMouseOver: function onMouseOver() {\n          return isHidden(index) ? null : [{\n            // Mute all data series, except the data associated with this event\n            childName: childNames,\n            target: 'data',\n            eventKey: 'all',\n            mutation: function mutation(props) {\n              return isDataHidden(props.data) ? null : {\n                // Skip if hidden\n                style: Object.assign(Object.assign({}, props.style), {\n                  opacity: chart_area_Opacity.value\n                })\n              };\n            }\n          }, {\n            // Mute all legend item symbols, except the symbol associated with this event\n            childName: legendName,\n            target: 'data',\n            eventKey: legendItems,\n            mutation: function mutation(props) {\n              return isHidden(props.index) ? null : {\n                // Skip if hidden\n                style: Object.assign(Object.assign({}, props.style), {\n                  opacity: chart_area_Opacity.value\n                })\n              };\n            }\n          }, {\n            // Mute all legend item labels, except the label associated with this event\n            childName: legendName,\n            target: 'labels',\n            eventKey: legendItems,\n            mutation: function mutation(props) {\n              var column = props.datum && props.datum.column ? props.datum.column : 0;\n              return isHidden(column) ? null : {\n                // Skip if hidden\n                style: Object.assign(Object.assign({}, props.style), {\n                  opacity: chart_area_Opacity.value\n                })\n              };\n            }\n          }];\n        },\n        onMouseOut: function onMouseOut() {\n          return [{\n            // Restore all data series associated with this event\n            childName: 'all',\n            target: 'data',\n            eventKey: 'all',\n            mutation: function mutation() {\n              return null;\n            }\n          }, {\n            // Restore all legend item symbols associated with this event\n            childName: 'legend',\n            target: 'data',\n            eventKey: legendItems,\n            mutation: function mutation() {\n              return null;\n            }\n          }, {\n            // Restore all legend item labels associated with this event\n            childName: 'legend',\n            target: 'labels',\n            eventKey: legendItems,\n            mutation: function mutation() {\n              return null;\n            }\n          }];\n        }\n      }\n    };\n  });\n};","map":{"version":3,"sources":["../../../../src/components/ChartUtils/chart-interactive-legend.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable camelcase */\nimport chart_area_Opacity from \"@patternfly/react-tokens/dist/esm/chart_area_Opacity\";\nimport chart_color_black_500 from \"@patternfly/react-tokens/dist/esm/chart_color_black_500\";\n// Returns child names for each series, except given ID index\nconst getChildNames = ({ chartNames, omitIndex }) => {\n    const result = [];\n    chartNames.map((chartName, index) => {\n        if (index !== omitIndex) {\n            if (Array.isArray(chartName)) {\n                chartName.forEach(name => result.push(name));\n            }\n            else {\n                result.push(chartName);\n            }\n        }\n    });\n    return result;\n};\n// Returns events for an interactive legend\nexport const getInteractiveLegendEvents = (props) => [\n    ...getInteractiveLegendTargetEvents(Object.assign(Object.assign({}, props), { target: 'data' })),\n    ...getInteractiveLegendTargetEvents(Object.assign(Object.assign({}, props), { target: 'labels' }))\n];\n// Returns legend items, except given ID index\nconst getInteractiveLegendItems = ({ chartNames, omitIndex }) => {\n    const result = [];\n    chartNames.map((_, index) => {\n        if (index !== omitIndex) {\n            result.push(index);\n        }\n    });\n    return result;\n};\n// Returns styles for interactive legend items\nexport const getInteractiveLegendItemStyles = (hidden = false) => !hidden\n    ? {}\n    : {\n        labels: {\n            fill: chart_color_black_500.value\n        },\n        symbol: {\n            fill: chart_color_black_500.value,\n            type: 'eyeSlash'\n        }\n    };\n// Returns targeted events for legend 'data' or 'labels'\nconst getInteractiveLegendTargetEvents = ({ chartNames, isDataHidden = () => false, isHidden = () => false, legendName, onLegendClick = () => null, target }) => {\n    if (chartNames === undefined || legendName === undefined) {\n        // eslint-disable-next-line no-console\n        console.error('getInteractiveLegendTargetEvents:', 'requires chartNames and legendName to be specified');\n        return [];\n    }\n    return chartNames.map((_, index) => {\n        // Get IDs to attach events to, except the IDs associated with this event.\n        //\n        // For example, if the current event key is 0, we need IDs associated with events 1 and 2. If the current event\n        // key is 1, we need IDs associated with events 0 and 2. And so on...\n        const childNames = getChildNames({ chartNames, legendName, omitIndex: index });\n        const legendItems = getInteractiveLegendItems({ chartNames, legendName, omitIndex: index });\n        return {\n            childName: legendName,\n            target,\n            eventKey: index,\n            eventHandlers: {\n                onClick: () => [\n                    {\n                        // Hide each data series individually\n                        target: 'data',\n                        mutation: (props) => {\n                            onLegendClick(props);\n                            return null;\n                        }\n                    }\n                ],\n                onMouseOver: () => isHidden(index)\n                    ? null\n                    : [\n                        {\n                            // Mute all data series, except the data associated with this event\n                            childName: childNames,\n                            target: 'data',\n                            eventKey: 'all',\n                            mutation: (props) => isDataHidden(props.data)\n                                ? null\n                                : {\n                                    // Skip if hidden\n                                    style: Object.assign(Object.assign({}, props.style), { opacity: chart_area_Opacity.value })\n                                }\n                        },\n                        {\n                            // Mute all legend item symbols, except the symbol associated with this event\n                            childName: legendName,\n                            target: 'data',\n                            eventKey: legendItems,\n                            mutation: (props) => isHidden(props.index)\n                                ? null\n                                : {\n                                    // Skip if hidden\n                                    style: Object.assign(Object.assign({}, props.style), { opacity: chart_area_Opacity.value })\n                                }\n                        },\n                        {\n                            // Mute all legend item labels, except the label associated with this event\n                            childName: legendName,\n                            target: 'labels',\n                            eventKey: legendItems,\n                            mutation: (props) => {\n                                const column = props.datum && props.datum.column ? props.datum.column : 0;\n                                return isHidden(column)\n                                    ? null\n                                    : {\n                                        // Skip if hidden\n                                        style: Object.assign(Object.assign({}, props.style), { opacity: chart_area_Opacity.value })\n                                    };\n                            }\n                        }\n                    ],\n                onMouseOut: () => [\n                    {\n                        // Restore all data series associated with this event\n                        childName: 'all',\n                        target: 'data',\n                        eventKey: 'all',\n                        mutation: () => null\n                    },\n                    {\n                        // Restore all legend item symbols associated with this event\n                        childName: 'legend',\n                        target: 'data',\n                        eventKey: legendItems,\n                        mutation: () => null\n                    },\n                    {\n                        // Restore all legend item labels associated with this event\n                        childName: 'legend',\n                        target: 'labels',\n                        eventKey: legendItems,\n                        mutation: () => null\n                    }\n                ]\n            }\n        };\n    });\n};\n//# sourceMappingURL=chart-interactive-legend.js.map"]},"metadata":{},"sourceType":"module"}